{"pageProps":{"frontMatter":{"title":"Build Next.js blog and deploy to Github Pages","date":"Sep 10, 2021","tag":["React","Deploy"],"excerpt":"How I build static blog site with Next.js, and general configuration to deploy to Github Pages in this post..."},"content":"\r\nNext.js was known as a React framework to support server-side rendering (SSR) with zero config(if not necessary). After recent updates, it supports static generation (SSG) well, too.\r\n\r\nTo build my own blog, I got two options for React frameworks, one was Next.js, and other was Gatsby. I want to export my blog to static files, and Gatsby is specialized for SSG though, I choose Next.js. There was no reason for me to choose new tech stack, because I already tried Next.js before(for SSR), and I heard SSG in Next.js performs well.\r\n\r\nI deployed the static files of my blog to Github Pages, and I needed some configuration. I would record how I built static blog site with Next.js, and general configuration to deploy to Github Pages in this post.\r\n\r\n## Table of Contents\r\n\r\n- Write posts with markdown format\r\n- Get slugs from markdown files\r\n- define path list from slugs\r\n- Parse markdown to html\r\n- Configuration\r\n\r\nMy code is modularized though, I put all code together in this post to make it easy to explain.\r\n\r\nI will skip to import all libraries. The dependency is blow.\r\n\r\n```javascript\r\n \"dependencies\": {\r\n    \"gh-pages\": \"^3.2.3\",\r\n    \"gray-matter\": \"^4.0.3\",\r\n    \"next\": \"^11.1.2\",\r\n    \"react\": \"17.0.2\",\r\n    \"react-dom\": \"17.0.2\",\r\n    \"react-markdown\": \"^6.0.3\",\r\n    \"react-syntax-highlighter\": \"^15.4.4\"\r\n  }\r\n```\r\n\r\n## Get post list from markdown files\r\n\r\n```javascript\r\n\r\nexport async function getStaticProps() {\r\n  const files = fs.readdirSync(path.join(\"posts\"));\r\n  // read file names from the directory\r\n  // It returns an array\r\n\r\n  const posts = files.map((filename) => {\r\n\r\n    const slug = filename.replace(\".md\", \"\");\r\n    const markdownWithMeta = fs.readFileSync(\r\n      path.join(\"posts\", filename),\r\n      \"utf-8\"\r\n    );\r\n    const { data: frontMatter, content } = matter(markdownWithMeta);\r\n\r\n    return {\r\n      slug,\r\n      ...frontMatter\r\n    };\r\n  });\r\n  // iterate files to get slug, and parse frontMatter of markdown\r\n  // use \"matter\" library to parse markdown\r\n\r\n  return {\r\n    props: {\r\n      posts,\r\n    },\r\n  };\r\n  // return props to React component\r\n}\r\n\r\nexport default function Index({ posts }) {\r\n    ...\r\n}\r\n```\r\n\r\nNow we got an array including slug of each posts. We can route pages with those slugs.\r\n\r\n## Get static path from slug\r\n\r\nIf a page has dynamic routes and uses getStaticProps it needs to define a list of paths that have to be rendered to HTML at build time.\r\n\r\nIf you export an async function called getStaticPaths from a page that uses dynamic routes, Next.js will statically pre-render all the paths specified by getStaticPaths.\r\n\r\n```javascript\r\n// [slug].jsx\r\n// https://localhost:3000/slug\r\n\r\nexport async function getStaticPaths() {\r\n  const files = fs.readdirSync(path.join(\"posts\"));\r\n\r\n  const paths = files.map((filename) => ({\r\n    params: {\r\n      slug: filename.replace(\".md\", \"\"),\r\n    },\r\n  }));\r\n\r\n  return {\r\n    paths,\r\n    fallback: true,\r\n  };\r\n}\r\n// define a list of paths\r\n```\r\n\r\n## Parse markdown to html and render\r\n\r\n```javascript\r\n// [slug].jsx\r\n\r\n...\r\n\r\nexport async function getStaticProps({ params: { slug } }) {\r\n  const markdownWithMeta = fs.readFileSync(\r\n    path.join(\"posts\", slug + \".md\"),\r\n    \"utf-8\"\r\n  );\r\n// get a single markdown file with a slug\r\n\r\n  const { data: frontMatter, content } = matter(markdownWithMeta);\r\n// parse the markdown file\r\n\r\n  return {\r\n    props: { frontMatter, content },\r\n  };\r\n}\r\n// return props to a React Component\r\n// content is html\r\n\r\nexport default function Blog({ frontMatter: { title }, content}) {\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      <div className={styles.content}>\r\n        <ReactMarkdown>{content}</ReactMarkdown>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n// Render html with \"markdown\" library\r\n```\r\n\r\n## Configuration\r\n\r\nTo generate static site, and deploy to CDN, we can set up an asset Prefix and configure the CDN's origin to resolve to the domain that Next.js is hosted on.\r\n\r\n```javascript\r\n// next.config.js\r\n\r\nconst isProd = process.env.NODE_ENV === \"production\";\r\n\r\nmodule.exports = {\r\n  // Use the CDN in production and localhost for development.\r\n  assetPrefix: isProd ? \"https://cdn.mydomain.com\" : \"\",\r\n};\r\n```\r\n\r\nAnd I imported the assetPrest to fix image links between pages.\r\n\r\n```javascript\r\n// _app.js\r\n\r\nimport { assetPrefix } from \"../next.config\";\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  const date = new Date();\r\n  return (\r\n      <Component {...pageProps} prefix={assetPrefix} />\r\n  );\r\n}\r\nexport default MyApp;\r\n\r\n// other pages\r\n<img src={prefix + \"imgSrc\"}>\r\n```\r\n\r\n## References\r\n\r\n- [https://nextjs.org/](https://nextjs.org/)\r\n- [hhttps://dev.to/jameswallis/](https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn)\r\n"},"__N_SSG":true}